version: '3.5'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - kafka_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - kafka_network
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL_SAME_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "geo-locations:1:1"

  kafdrop:
    image: obsidiandynamics/kafdrop
    networks:
      - kafka_network
    restart: "on-failure"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - kafka

  producer:
    build:
      context: ./
      dockerfile: ./producer/Dockerfile
      target: dev
    networks:
      - kafka_network
    restart: "on-failure"
    ports:
      - "8000:8000"
    depends_on:
      - kafka
    volumes:
      - ./producer:/home/appuser/code

  consumer:
    build:
      context: ./
      dockerfile: ./consumer/Dockerfile
      target: dev
    networks:
      - kafka_network
    restart: "on-failure"
    depends_on:
      - kafka
    volumes: &code
      - ./consumer:/home/appuser/code


networks:
  kafka_network:
    name: kafka_docker_net